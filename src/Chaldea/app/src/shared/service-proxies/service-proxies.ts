/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.7.0 (NJsonSchema v9.10.6.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @phoneNumber (optional) 
     * @return Success
     */
    getCode(phoneNumber: string | null): Observable<void> {
        let url_ = this.baseUrl + "/api/account/getCode?";
        if (phoneNumber !== undefined)
            url_ += "phoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetCode(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    register(input: RegisterDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processRegister(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class AnimeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @bangumiId (optional) 
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getList(bangumiId: string | null, skip: number | null, take: number | null): Observable<AnimeOutlineDto[]> {
        let url_ = this.baseUrl + "/api/anime/getList?";
        if (bangumiId !== undefined)
            url_ += "bangumiId=" + encodeURIComponent("" + bangumiId) + "&"; 
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&"; 
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetList(response_);
                } catch (e) {
                    return <Observable<AnimeOutlineDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AnimeOutlineDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetList(response: HttpResponse<Blob>): Observable<AnimeOutlineDto[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AnimeOutlineDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AnimeOutlineDto[]>(<any>null);
    }

    /**
     * @animeId (optional) 
     * @return Success
     */
    getAnime(animeId: string | null): Observable<AnimeDto> {
        let url_ = this.baseUrl + "/api/anime/getAnime?";
        if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetAnime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetAnime(response_);
                } catch (e) {
                    return <Observable<AnimeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AnimeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAnime(response: HttpResponse<Blob>): Observable<AnimeDto> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AnimeDto.fromJS(resultData200) : new AnimeDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AnimeDto>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    update(input: AnimeDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/anime/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdate(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @resources (optional) 
     * @return Success
     */
    removeVideos(id: string, resources: string[] | null): Observable<void> {
        let url_ = this.baseUrl + "/api/anime/{id}/removeVideos";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resources);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processRemoveVideos(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processRemoveVideos(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveVideos(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class AnimeTagServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTags(): Observable<AnimeTagDto> {
        let url_ = this.baseUrl + "/api/animeTag/getTags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetTags(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetTags(response_);
                } catch (e) {
                    return <Observable<AnimeTagDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AnimeTagDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTags(response: HttpResponse<Blob>): Observable<AnimeTagDto> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AnimeTagDto.fromJS(resultData200) : new AnimeTagDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AnimeTagDto>(<any>null);
    }
}

@Injectable()
export class BangumiServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createOrUpdate(input: BangumiEditDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/bangumi/createOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processCreateOrUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processCreateOrUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdate(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/bangumi/{id}/delete";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processDelete(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDelete(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getList(): Observable<BangumiDto[]> {
        let url_ = this.baseUrl + "/api/bangumi/getList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetList(response_);
                } catch (e) {
                    return <Observable<BangumiDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BangumiDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetList(response: HttpResponse<Blob>): Observable<BangumiDto[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BangumiDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<BangumiDto[]>(<any>null);
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @slice (optional) 
     * @return Success
     */
    getAnimes(skip: number | null, take: number | null, slice: number | null): Observable<BangumiAnimesDto[]> {
        let url_ = this.baseUrl + "/api/bangumi/getAnimes?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&"; 
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&"; 
        if (slice !== undefined)
            url_ += "slice=" + encodeURIComponent("" + slice) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetAnimes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetAnimes(response_);
                } catch (e) {
                    return <Observable<BangumiAnimesDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BangumiAnimesDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAnimes(response: HttpResponse<Blob>): Observable<BangumiAnimesDto[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BangumiAnimesDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<BangumiAnimesDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    import(id: string, input: ImportBangumiDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/bangumi/{id}/import";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processImport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processImport(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processImport(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class BannerServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @banner (optional) 
     * @return Success
     */
    add(banner: Banner | null): Observable<void> {
        let url_ = this.baseUrl + "/api/banner/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(banner);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processAdd(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processAdd(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAdd(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getList(skip: number | null, take: number | null): Observable<Banner[]> {
        let url_ = this.baseUrl + "/api/banner/getList?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&"; 
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetList(response_);
                } catch (e) {
                    return <Observable<Banner[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Banner[]>><any>Observable.throw(response_);
        });
    }

    protected processGetList(response: HttpResponse<Blob>): Observable<Banner[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Banner.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Banner[]>(<any>null);
    }
}

@Injectable()
export class MigrateServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    migrateAnimeTags(): Observable<void> {
        let url_ = this.baseUrl + "/api/migrate/migrateAnimeTags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processMigrateAnimeTags(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processMigrateAnimeTags(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processMigrateAnimeTags(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class NodeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getNodes(): Observable<Node[]> {
        let url_ = this.baseUrl + "/api/node/getNodes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetNodes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetNodes(response_);
                } catch (e) {
                    return <Observable<Node[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Node[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNodes(response: HttpResponse<Blob>): Observable<Node[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Node.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Node[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    getDirFiles(nodeId: string, input: GetDirFileDto | null): Observable<DirFileInfo[]> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/getDirFiles";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processGetDirFiles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetDirFiles(response_);
                } catch (e) {
                    return <Observable<DirFileInfo[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<DirFileInfo[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDirFiles(response: HttpResponse<Blob>): Observable<DirFileInfo[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DirFileInfo.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<DirFileInfo[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    deleteDirFiles(nodeId: string, input: DirFileInfo[] | null): Observable<string> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/deleteDirFiles";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDeleteDirFiles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processDeleteDirFiles(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processDeleteDirFiles(response: HttpResponse<Blob>): Observable<string> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    extractFiles(nodeId: string, input: ExtractFileDto | null): Observable<string> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/extractFiles";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processExtractFiles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processExtractFiles(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processExtractFiles(response: HttpResponse<Blob>): Observable<string> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    getNetDiskDirFiles(nodeId: string, input: GetDirFileDto | null): Observable<DirFileInfo[]> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/getNetDiskDirFiles";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processGetNetDiskDirFiles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetNetDiskDirFiles(response_);
                } catch (e) {
                    return <Observable<DirFileInfo[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<DirFileInfo[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNetDiskDirFiles(response: HttpResponse<Blob>): Observable<DirFileInfo[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DirFileInfo.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<DirFileInfo[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    bindSyncDir(nodeId: string, input: SyncDirectory | null): Observable<void> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/bindSyncDir";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processBindSyncDir(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processBindSyncDir(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBindSyncDir(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getSyncDirs(nodeId: string): Observable<SyncDirectory[]> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/getSyncDirs";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetSyncDirs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetSyncDirs(response_);
                } catch (e) {
                    return <Observable<SyncDirectory[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SyncDirectory[]>><any>Observable.throw(response_);
        });
    }

    protected processGetSyncDirs(response: HttpResponse<Blob>): Observable<SyncDirectory[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SyncDirectory.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<SyncDirectory[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    syncDir(nodeId: string, input: SyncDirectory | null): Observable<string> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/syncDir";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processSyncDir(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processSyncDir(response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processSyncDir(response: HttpResponse<Blob>): Observable<string> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    publishResource(nodeId: string, input: PublishResourceDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/node/{nodeId}/publishResource";
        if (nodeId === undefined || nodeId === null)
            throw new Error("The parameter 'nodeId' must be defined.");
        url_ = url_.replace("{nodeId}", encodeURIComponent("" + nodeId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPublishResource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processPublishResource(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPublishResource(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TimetableServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @input (optional) 
     * @return Success
     */
    createTimetable(input: Timetable | null): Observable<void> {
        let url_ = this.baseUrl + "/api/timetable/createTimetable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processCreateTimetable(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processCreateTimetable(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTimetable(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getList(skip: number | null, take: number | null): Observable<TimetableDto[]> {
        let url_ = this.baseUrl + "/api/timetable/getList?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&"; 
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetList(response_);
                } catch (e) {
                    return <Observable<TimetableDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<TimetableDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetList(response: HttpResponse<Blob>): Observable<TimetableDto[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TimetableDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<TimetableDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getWeeks(): Observable<DropdownItem[]> {
        let url_ = this.baseUrl + "/api/timetable/getWeeks";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetWeeks(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetWeeks(response_);
                } catch (e) {
                    return <Observable<DropdownItem[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<DropdownItem[]>><any>Observable.throw(response_);
        });
    }

    protected processGetWeeks(response: HttpResponse<Blob>): Observable<DropdownItem[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(DropdownItem.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<DropdownItem[]>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @skip (optional) 
     * @take (optional) 
     * @return Success
     */
    getUsers(skip: number | null, take: number | null): Observable<UserDto[]> {
        let url_ = this.baseUrl + "/api/user/getUsers?";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&"; 
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetUsers(response_);
                } catch (e) {
                    return <Observable<UserDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetUsers(response: HttpResponse<Blob>): Observable<UserDto[]> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(UserDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<UserDto[]>(<any>null);
    }

    /**
     * @input (optional) 
     * @return Success
     */
    addUser(input: UserDto | null): Observable<void> {
        let url_ = this.baseUrl + "/api/user/addUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processAddUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processAddUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddUser(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    removeUser(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/user/{id}/removeUser";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processRemoveUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processRemoveUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveUser(response: HttpResponse<Blob>): Observable<void> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class VideoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getVideo(id: string): Observable<VideoDto> {
        let url_ = this.baseUrl + "/api/video/{id}/getVideo";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetVideo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponse) {
                try {
                    return this.processGetVideo(response_);
                } catch (e) {
                    return <Observable<VideoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<VideoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetVideo(response: HttpResponse<Blob>): Observable<VideoDto> {
        const status = response.status; 

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(response.body).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VideoDto.fromJS(resultData200) : new VideoDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(response.body).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<VideoDto>(<any>null);
    }
}

export class RegisterDto implements IRegisterDto {
    phoneNumber: string | undefined;
    code: string | undefined;
    password: string | undefined;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNumber = data["phoneNumber"];
            this.code = data["code"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegisterDto {
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["code"] = this.code;
        data["password"] = this.password;
        return data; 
    }
}

export interface IRegisterDto {
    phoneNumber: string | undefined;
    code: string | undefined;
    password: string | undefined;
}

export class AnimeOutlineDto implements IAnimeOutlineDto {
    id: string | undefined;
    title: string | undefined;
    cover: string | undefined;

    constructor(data?: IAnimeOutlineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.cover = data["cover"];
        }
    }

    static fromJS(data: any): AnimeOutlineDto {
        let result = new AnimeOutlineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["cover"] = this.cover;
        return data; 
    }
}

export interface IAnimeOutlineDto {
    id: string | undefined;
    title: string | undefined;
    cover: string | undefined;
}

export class AnimeDto implements IAnimeDto {
    id: string | undefined;
    title: string | undefined;
    cover: string | undefined;
    playCounts: number | undefined;
    subCounts: number | undefined;
    desc: string | undefined;
    auth: string | undefined;
    publisher: string | undefined;
    director: string | undefined;
    state: string | undefined;
    type: string | undefined;
    level: number | undefined;
    tags: string[] | undefined;
    videos: Resource[] | undefined;
    comics: Resource[] | undefined;
    novels: Resource[] | undefined;
    comments: string[] | undefined;

    constructor(data?: IAnimeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.cover = data["cover"];
            this.playCounts = data["playCounts"];
            this.subCounts = data["subCounts"];
            this.desc = data["desc"];
            this.auth = data["auth"];
            this.publisher = data["publisher"];
            this.director = data["director"];
            this.state = data["state"];
            this.type = data["type"];
            this.level = data["level"];
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(item);
            }
            if (data["videos"] && data["videos"].constructor === Array) {
                this.videos = [];
                for (let item of data["videos"])
                    this.videos.push(Resource.fromJS(item));
            }
            if (data["comics"] && data["comics"].constructor === Array) {
                this.comics = [];
                for (let item of data["comics"])
                    this.comics.push(Resource.fromJS(item));
            }
            if (data["novels"] && data["novels"].constructor === Array) {
                this.novels = [];
                for (let item of data["novels"])
                    this.novels.push(Resource.fromJS(item));
            }
            if (data["comments"] && data["comments"].constructor === Array) {
                this.comments = [];
                for (let item of data["comments"])
                    this.comments.push(item);
            }
        }
    }

    static fromJS(data: any): AnimeDto {
        let result = new AnimeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["cover"] = this.cover;
        data["playCounts"] = this.playCounts;
        data["subCounts"] = this.subCounts;
        data["desc"] = this.desc;
        data["auth"] = this.auth;
        data["publisher"] = this.publisher;
        data["director"] = this.director;
        data["state"] = this.state;
        data["type"] = this.type;
        data["level"] = this.level;
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (this.videos && this.videos.constructor === Array) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        if (this.comics && this.comics.constructor === Array) {
            data["comics"] = [];
            for (let item of this.comics)
                data["comics"].push(item.toJSON());
        }
        if (this.novels && this.novels.constructor === Array) {
            data["novels"] = [];
            for (let item of this.novels)
                data["novels"].push(item.toJSON());
        }
        if (this.comments && this.comments.constructor === Array) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item);
        }
        return data; 
    }
}

export interface IAnimeDto {
    id: string | undefined;
    title: string | undefined;
    cover: string | undefined;
    playCounts: number | undefined;
    subCounts: number | undefined;
    desc: string | undefined;
    auth: string | undefined;
    publisher: string | undefined;
    director: string | undefined;
    state: string | undefined;
    type: string | undefined;
    level: number | undefined;
    tags: string[] | undefined;
    videos: Resource[] | undefined;
    comics: Resource[] | undefined;
    novels: Resource[] | undefined;
    comments: string[] | undefined;
}

export class Resource implements IResource {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Resource {
        let result = new Resource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IResource {
    id: string | undefined;
    name: string | undefined;
}

export class AnimeTagDto implements IAnimeTagDto {
    types: string[] | undefined;
    tags: string[] | undefined;
    states: string[] | undefined;

    constructor(data?: IAnimeTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["types"] && data["types"].constructor === Array) {
                this.types = [];
                for (let item of data["types"])
                    this.types.push(item);
            }
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(item);
            }
            if (data["states"] && data["states"].constructor === Array) {
                this.states = [];
                for (let item of data["states"])
                    this.states.push(item);
            }
        }
    }

    static fromJS(data: any): AnimeTagDto {
        let result = new AnimeTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.types && this.types.constructor === Array) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (this.states && this.states.constructor === Array) {
            data["states"] = [];
            for (let item of this.states)
                data["states"].push(item);
        }
        return data; 
    }
}

export interface IAnimeTagDto {
    types: string[] | undefined;
    tags: string[] | undefined;
    states: string[] | undefined;
}

export class BangumiEditDto implements IBangumiEditDto {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IBangumiEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): BangumiEditDto {
        let result = new BangumiEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IBangumiEditDto {
    id: string | undefined;
    name: string | undefined;
}

export class BangumiDto implements IBangumiDto {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IBangumiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): BangumiDto {
        let result = new BangumiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IBangumiDto {
    id: string | undefined;
    name: string | undefined;
}

export class BangumiAnimesDto implements IBangumiAnimesDto {
    id: string | undefined;
    name: string | undefined;
    animes: AnimeOutlineDto[] | undefined;

    constructor(data?: IBangumiAnimesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            if (data["animes"] && data["animes"].constructor === Array) {
                this.animes = [];
                for (let item of data["animes"])
                    this.animes.push(AnimeOutlineDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BangumiAnimesDto {
        let result = new BangumiAnimesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (this.animes && this.animes.constructor === Array) {
            data["animes"] = [];
            for (let item of this.animes)
                data["animes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBangumiAnimesDto {
    id: string | undefined;
    name: string | undefined;
    animes: AnimeOutlineDto[] | undefined;
}

export class ImportBangumiDto implements IImportBangumiDto {
    clear: boolean | undefined;
    isFromFile: boolean | undefined;
    resource: string | undefined;

    constructor(data?: IImportBangumiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clear = data["clear"];
            this.isFromFile = data["isFromFile"];
            this.resource = data["resource"];
        }
    }

    static fromJS(data: any): ImportBangumiDto {
        let result = new ImportBangumiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clear"] = this.clear;
        data["isFromFile"] = this.isFromFile;
        data["resource"] = this.resource;
        return data; 
    }
}

export interface IImportBangumiDto {
    clear: boolean | undefined;
    isFromFile: boolean | undefined;
    resource: string | undefined;
}

export class Banner implements IBanner {
    image: string | undefined;
    link: string | undefined;
    title: string | undefined;
    id: string | undefined;

    constructor(data?: IBanner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.image = data["image"];
            this.link = data["link"];
            this.title = data["title"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Banner {
        let result = new Banner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["image"] = this.image;
        data["link"] = this.link;
        data["title"] = this.title;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBanner {
    image: string | undefined;
    link: string | undefined;
    title: string | undefined;
    id: string | undefined;
}

export class Node implements INode {
    name: string | undefined;
    osType: string | undefined;
    ip: string | undefined;
    state: NodeState | undefined;
    connectionId: string | undefined;
    id: string | undefined;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.osType = data["osType"];
            this.ip = data["ip"];
            this.state = data["state"];
            this.connectionId = data["connectionId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Node {
        let result = new Node();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["osType"] = this.osType;
        data["ip"] = this.ip;
        data["state"] = this.state;
        data["connectionId"] = this.connectionId;
        data["id"] = this.id;
        return data; 
    }
}

export interface INode {
    name: string | undefined;
    osType: string | undefined;
    ip: string | undefined;
    state: NodeState | undefined;
    connectionId: string | undefined;
    id: string | undefined;
}

export class GetDirFileDto implements IGetDirFileDto {
    path: string | undefined;

    constructor(data?: IGetDirFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.path = data["path"];
        }
    }

    static fromJS(data: any): GetDirFileDto {
        let result = new GetDirFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        return data; 
    }
}

export interface IGetDirFileDto {
    path: string | undefined;
}

export class DirFileInfo implements IDirFileInfo {
    type: DirFileInfoType | undefined;
    name: string | undefined;
    fullName: string | undefined;
    modifyTime: moment.Moment | undefined;
    size: string | undefined;
    length: number | undefined;

    constructor(data?: IDirFileInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.name = data["name"];
            this.fullName = data["fullName"];
            this.modifyTime = data["modifyTime"] ? moment(data["modifyTime"].toString()) : <any>undefined;
            this.size = data["size"];
            this.length = data["length"];
        }
    }

    static fromJS(data: any): DirFileInfo {
        let result = new DirFileInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["modifyTime"] = this.modifyTime ? this.modifyTime.toISOString() : <any>undefined;
        data["size"] = this.size;
        data["length"] = this.length;
        return data; 
    }
}

export interface IDirFileInfo {
    type: DirFileInfoType | undefined;
    name: string | undefined;
    fullName: string | undefined;
    modifyTime: moment.Moment | undefined;
    size: string | undefined;
    length: number | undefined;
}

export class ExtractFileDto implements IExtractFileDto {
    files: DirFileInfo[] | undefined;
    destDir: string | undefined;
    password: string | undefined;

    constructor(data?: IExtractFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["files"] && data["files"].constructor === Array) {
                this.files = [];
                for (let item of data["files"])
                    this.files.push(DirFileInfo.fromJS(item));
            }
            this.destDir = data["destDir"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ExtractFileDto {
        let result = new ExtractFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.files && this.files.constructor === Array) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["destDir"] = this.destDir;
        data["password"] = this.password;
        return data; 
    }
}

export interface IExtractFileDto {
    files: DirFileInfo[] | undefined;
    destDir: string | undefined;
    password: string | undefined;
}

export class SyncDirectory implements ISyncDirectory {
    local: string | undefined;
    remote: string | undefined;

    constructor(data?: ISyncDirectory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.local = data["local"];
            this.remote = data["remote"];
        }
    }

    static fromJS(data: any): SyncDirectory {
        let result = new SyncDirectory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["local"] = this.local;
        data["remote"] = this.remote;
        return data; 
    }
}

export interface ISyncDirectory {
    local: string | undefined;
    remote: string | undefined;
}

export class PublishResourceDto implements IPublishResourceDto {
    animeId: string | undefined;
    publishFiles: PublishDirFileInfo[] | undefined;

    constructor(data?: IPublishResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.animeId = data["animeId"];
            if (data["publishFiles"] && data["publishFiles"].constructor === Array) {
                this.publishFiles = [];
                for (let item of data["publishFiles"])
                    this.publishFiles.push(PublishDirFileInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PublishResourceDto {
        let result = new PublishResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animeId"] = this.animeId;
        if (this.publishFiles && this.publishFiles.constructor === Array) {
            data["publishFiles"] = [];
            for (let item of this.publishFiles)
                data["publishFiles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPublishResourceDto {
    animeId: string | undefined;
    publishFiles: PublishDirFileInfo[] | undefined;
}

export class PublishDirFileInfo implements IPublishDirFileInfo {
    displayName: string | undefined;
    url: string | undefined;
    type: PublishDirFileInfoType | undefined;
    name: string | undefined;
    fullName: string | undefined;
    modifyTime: moment.Moment | undefined;
    size: string | undefined;
    length: number | undefined;

    constructor(data?: IPublishDirFileInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.url = data["url"];
            this.type = data["type"];
            this.name = data["name"];
            this.fullName = data["fullName"];
            this.modifyTime = data["modifyTime"] ? moment(data["modifyTime"].toString()) : <any>undefined;
            this.size = data["size"];
            this.length = data["length"];
        }
    }

    static fromJS(data: any): PublishDirFileInfo {
        let result = new PublishDirFileInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["url"] = this.url;
        data["type"] = this.type;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["modifyTime"] = this.modifyTime ? this.modifyTime.toISOString() : <any>undefined;
        data["size"] = this.size;
        data["length"] = this.length;
        return data; 
    }
}

export interface IPublishDirFileInfo {
    displayName: string | undefined;
    url: string | undefined;
    type: PublishDirFileInfoType | undefined;
    name: string | undefined;
    fullName: string | undefined;
    modifyTime: moment.Moment | undefined;
    size: string | undefined;
    length: number | undefined;
}

export class Timetable implements ITimetable {
    animeId: string | undefined;
    sourceUrl: string | undefined;
    sourcePwd: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    updateTime: string | undefined;
    updateWeek: TimetableUpdateWeek | undefined;
    id: string | undefined;

    constructor(data?: ITimetable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.animeId = data["animeId"];
            this.sourceUrl = data["sourceUrl"];
            this.sourcePwd = data["sourcePwd"];
            this.beginDate = data["beginDate"] ? moment(data["beginDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.updateTime = data["updateTime"];
            this.updateWeek = data["updateWeek"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Timetable {
        let result = new Timetable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animeId"] = this.animeId;
        data["sourceUrl"] = this.sourceUrl;
        data["sourcePwd"] = this.sourcePwd;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["updateTime"] = this.updateTime;
        data["updateWeek"] = this.updateWeek;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITimetable {
    animeId: string | undefined;
    sourceUrl: string | undefined;
    sourcePwd: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    updateTime: string | undefined;
    updateWeek: TimetableUpdateWeek | undefined;
    id: string | undefined;
}

export class TimetableDto implements ITimetableDto {
    anime: AnimeOutlineDto | undefined;
    sourceUrl: string | undefined;
    sourcePwd: string | undefined;
    updateTime: string | undefined;
    updateWeek: TimetableDtoUpdateWeek | undefined;
    weekName: string | undefined;
    id: string | undefined;

    constructor(data?: ITimetableDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.anime = data["anime"] ? AnimeOutlineDto.fromJS(data["anime"]) : <any>undefined;
            this.sourceUrl = data["sourceUrl"];
            this.sourcePwd = data["sourcePwd"];
            this.updateTime = data["updateTime"];
            this.updateWeek = data["updateWeek"];
            this.weekName = data["weekName"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TimetableDto {
        let result = new TimetableDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anime"] = this.anime ? this.anime.toJSON() : <any>undefined;
        data["sourceUrl"] = this.sourceUrl;
        data["sourcePwd"] = this.sourcePwd;
        data["updateTime"] = this.updateTime;
        data["updateWeek"] = this.updateWeek;
        data["weekName"] = this.weekName;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITimetableDto {
    anime: AnimeOutlineDto | undefined;
    sourceUrl: string | undefined;
    sourcePwd: string | undefined;
    updateTime: string | undefined;
    updateWeek: TimetableDtoUpdateWeek | undefined;
    weekName: string | undefined;
    id: string | undefined;
}

export class DropdownItem implements IDropdownItem {
    text: string | undefined;
    value: string | undefined;

    constructor(data?: IDropdownItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): DropdownItem {
        let result = new DropdownItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface IDropdownItem {
    text: string | undefined;
    value: string | undefined;
}

export class UserDto implements IUserDto {
    role: string | undefined;
    isActive: boolean | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    name: string | undefined;
    id: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"];
            this.isActive = data["isActive"];
            this.email = data["email"];
            this.phoneNumber = data["phoneNumber"];
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserDto {
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["isActive"] = this.isActive;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserDto {
    role: string | undefined;
    isActive: boolean | undefined;
    email: string | undefined;
    phoneNumber: string | undefined;
    name: string | undefined;
    id: string | undefined;
}

export class VideoDto implements IVideoDto {
    size: string | undefined;
    cover: string | undefined;
    title: string | undefined;
    url: string | undefined;
    duration: number | undefined;
    frameWidth: number | undefined;
    frameHeight: number | undefined;
    frameRate: number | undefined;
    id: string | undefined;

    constructor(data?: IVideoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.size = data["size"];
            this.cover = data["cover"];
            this.title = data["title"];
            this.url = data["url"];
            this.duration = data["duration"];
            this.frameWidth = data["frameWidth"];
            this.frameHeight = data["frameHeight"];
            this.frameRate = data["frameRate"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VideoDto {
        let result = new VideoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size;
        data["cover"] = this.cover;
        data["title"] = this.title;
        data["url"] = this.url;
        data["duration"] = this.duration;
        data["frameWidth"] = this.frameWidth;
        data["frameHeight"] = this.frameHeight;
        data["frameRate"] = this.frameRate;
        data["id"] = this.id;
        return data; 
    }
}

export interface IVideoDto {
    size: string | undefined;
    cover: string | undefined;
    title: string | undefined;
    url: string | undefined;
    duration: number | undefined;
    frameWidth: number | undefined;
    frameHeight: number | undefined;
    frameRate: number | undefined;
    id: string | undefined;
}

export enum NodeState {
    _0 = 0, 
    _1 = 1, 
}

export enum DirFileInfoType {
    _0 = 0, 
    _1 = 1, 
}

export enum PublishDirFileInfoType {
    _0 = 0, 
    _1 = 1, 
}

export enum TimetableUpdateWeek {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum TimetableDtoUpdateWeek {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}